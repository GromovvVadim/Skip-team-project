// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SST.Persistence;

namespace SST.Persistence.Migrations
{
    [DbContext(typeof(SSTDbContext))]
    [Migration("20200424061219_Migration-1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SST.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JournalColumnRef")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalColumnRef");

                    b.HasIndex("StudentRef");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JournalColumnRef = 4,
                            Mark = 20,
                            StudentRef = 1
                        },
                        new
                        {
                            Id = 2,
                            JournalColumnRef = 3,
                            Mark = 15,
                            StudentRef = 2
                        },
                        new
                        {
                            Id = 3,
                            JournalColumnRef = 2,
                            Mark = 18,
                            StudentRef = 3
                        },
                        new
                        {
                            Id = 4,
                            JournalColumnRef = 1,
                            Mark = 14,
                            StudentRef = 2
                        },
                        new
                        {
                            Id = 5,
                            JournalColumnRef = 5,
                            Mark = 20,
                            StudentRef = 3
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Faculty = "Факультет прикладної математики та інформатики",
                            IsMain = true,
                            Name = "ПМІ-31",
                            Year = 0
                        },
                        new
                        {
                            Id = 2,
                            Faculty = "Факультет прикладної математики та інформатики",
                            IsMain = true,
                            Name = "ПМІ-32",
                            Year = 0
                        },
                        new
                        {
                            Id = 3,
                            Faculty = "Факультет прикладної математики та інформатики",
                            IsMain = true,
                            Name = "ПМІ-33",
                            Year = 0
                        },
                        new
                        {
                            Id = 4,
                            Faculty = "Факультет журналістики",
                            IsMain = true,
                            Name = "ЖРН-11с",
                            Year = 0
                        },
                        new
                        {
                            Id = 5,
                            Faculty = "Філософський факультет",
                            IsMain = true,
                            Name = "ФФП-42с",
                            Year = 0
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.GroupSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupRef")
                        .HasColumnType("int");

                    b.Property<int>("SubjectRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupRef");

                    b.HasIndex("SubjectRef");

                    b.ToTable("GroupSubjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupRef = 1,
                            SubjectRef = 1
                        },
                        new
                        {
                            Id = 2,
                            GroupRef = 2,
                            SubjectRef = 1
                        },
                        new
                        {
                            Id = 3,
                            GroupRef = 3,
                            SubjectRef = 2
                        },
                        new
                        {
                            Id = 4,
                            GroupRef = 3,
                            SubjectRef = 4
                        },
                        new
                        {
                            Id = 5,
                            GroupRef = 5,
                            SubjectRef = 5
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.JournalColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupSubjectRef")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupSubjectRef");

                    b.ToTable("JournalColumns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupSubjectRef = 2
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupSubjectRef = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupSubjectRef = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupSubjectRef = 2
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupSubjectRef = 2
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademicStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique()
                        .HasFilter("[UserRef] IS NOT NULL");

                    b.ToTable("Lectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcademicStatus = "Доцент",
                            FirstName = "Анатолій",
                            LastName = "Музичук"
                        },
                        new
                        {
                            Id = 2,
                            AcademicStatus = "Асистент",
                            FirstName = "Андрій",
                            LastName = "Глова"
                        },
                        new
                        {
                            Id = 3,
                            AcademicStatus = "Професор",
                            FirstName = "Юрій",
                            LastName = "Щербина"
                        },
                        new
                        {
                            Id = 4,
                            AcademicStatus = "Доцент",
                            FirstName = "Віталій",
                            LastName = "Горлач"
                        },
                        new
                        {
                            Id = 5,
                            AcademicStatus = "Асистент",
                            FirstName = "Любомир",
                            LastName = "Галамага"
                        },
                        new
                        {
                            Id = 6,
                            AcademicStatus = "Професор",
                            FirstName = "Софія",
                            LastName = "Грабовська"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("UserRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserRef")
                        .IsUnique();

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2020, 4, 24, 9, 12, 17, 572, DateTimeKind.Local).AddTicks(843),
                            IsApproved = true,
                            UserRef = "admin@email.com"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2020, 4, 24, 9, 12, 17, 579, DateTimeKind.Local).AddTicks(5952),
                            IsApproved = true,
                            UserRef = "martashuyak@gmail.com"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.SecondaryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupRef")
                        .HasColumnType("int");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupRef");

                    b.HasIndex("StudentRef");

                    b.ToTable("SecondaryGroups");
                });

            modelBuilder.Entity("SST.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupRef")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRef")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupRef");

                    b.HasIndex("UserRef")
                        .IsUnique()
                        .HasFilter("[UserRef] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Володимир",
                            GroupRef = 2,
                            LastName = "Мільчановський"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Марта",
                            GroupRef = 2,
                            LastName = "Шуяк",
                            UserRef = "martashuyak@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Оксана",
                            GroupRef = 2,
                            LastName = "Пилипович"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Денис",
                            GroupRef = 1,
                            LastName = "Доскач"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Роман",
                            GroupRef = 3,
                            LastName = "Левкович"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LectorRef")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LectorRef");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LectorRef = 1,
                            Name = "Програмна інженерія"
                        },
                        new
                        {
                            Id = 2,
                            LectorRef = 3,
                            Name = "Дискретна математика"
                        },
                        new
                        {
                            Id = 3,
                            LectorRef = 5,
                            Name = "Програмування"
                        },
                        new
                        {
                            Id = 4,
                            LectorRef = 3,
                            Name = "Теорія ймовірності та математична статистика"
                        },
                        new
                        {
                            Id = 5,
                            LectorRef = 6,
                            Name = "Психологія примирення"
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "admin@email.com",
                            IsAdmin = true,
                            PasswordHash = "Yh+CEuxWzPTw0y2M9zgFEw1stxAwoa1mvyaoI2157nY="
                        },
                        new
                        {
                            Email = "martashuyak@gmail.com",
                            IsAdmin = false,
                            PasswordHash = "X1ReXJ0j6yv7TfPCmfQ/pTeniB/AnjIif5c03K1QNEU="
                        });
                });

            modelBuilder.Entity("SST.Domain.Entities.Grade", b =>
                {
                    b.HasOne("SST.Domain.Entities.JournalColumn", "JournalColumn")
                        .WithMany("Grades")
                        .HasForeignKey("JournalColumnRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Domain.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.GroupSubject", b =>
                {
                    b.HasOne("SST.Domain.Entities.Group", "Group")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("GroupRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Domain.Entities.Subject", "Subject")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("SubjectRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.JournalColumn", b =>
                {
                    b.HasOne("SST.Domain.Entities.GroupSubject", "GroupSubject")
                        .WithMany("Journal")
                        .HasForeignKey("GroupSubjectRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.Lector", b =>
                {
                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Lector")
                        .HasForeignKey("SST.Domain.Entities.Lector", "UserRef")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SST.Domain.Entities.Request", b =>
                {
                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Request")
                        .HasForeignKey("SST.Domain.Entities.Request", "UserRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.SecondaryGroup", b =>
                {
                    b.HasOne("SST.Domain.Entities.Group", "Group")
                        .WithMany("SecondaryGroups")
                        .HasForeignKey("GroupRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SST.Domain.Entities.Student", "Student")
                        .WithMany("SecondaryGroups")
                        .HasForeignKey("StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SST.Domain.Entities.Student", b =>
                {
                    b.HasOne("SST.Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupRef")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SST.Domain.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SST.Domain.Entities.Student", "UserRef")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SST.Domain.Entities.Subject", b =>
                {
                    b.HasOne("SST.Domain.Entities.Lector", "Lector")
                        .WithMany("Subjects")
                        .HasForeignKey("LectorRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
